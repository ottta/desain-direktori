// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  role          String?         @default("user")
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("user_account")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_session")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("user_verification_token")
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@map("user_authenticator")
}

enum TenantRole {
  PERSONAL
  COMPANY
}

model Tenant {
  id             String          @id @default(cuid())
  name           String
  slug           String          @unique @default(cuid())
  discipline     Discipline[]
  media          TenantMedia[]
  address        TenantAddress[]
  type           TenantRole      @default(COMPANY)
  avatar_url     String          @default("/favicon.png")
  established_at DateTime        @default(now())
  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt

  @@map("tenant")
}

model Discipline {
  id      String   @id @default(cuid())
  name    String   @unique
  slug    String   @unique
  tenants Tenant[]

  @@map("discipline")
}

model City {
  id            String          @id @default(cuid())
  name          String          @unique
  slug          String          @unique
  TenantAddress TenantAddress[]

  @@map("city")
}

model TenantAddress {
  id        String  @id @default(cuid())
  city      City    @relation(fields: [city_id], references: [id])
  city_id   String
  tenant    Tenant? @relation(fields: [tenant_id], references: [id])
  tenant_id String?

  @@map("tenant_address")
}

model TenantMedia {
  title  String
  url    String @default("")
  tenant Tenant @relation(fields: [title], references: [slug], onDelete: Cascade)

  @@id([title, url])
  @@map("tenant_media")
}
